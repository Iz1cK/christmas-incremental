--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.14 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		pickupDecoration = table.freeze({
			Fire = noop
		}),
		updateCurrency = table.freeze({
			On = noop
		}),
		purchaseMoveSpeedUpgrade = table.freeze({
			Fire = noop
		}),
		purchaseIntervalUpgrade = table.freeze({
			Fire = noop
		}),
		purchaseMultiplierUpgrade = table.freeze({
			Fire = noop
		}),
		purchaseMaxDecorationsUpgrade = table.freeze({
			Fire = noop
		}),
		purchasePickupRangeUpgrade = table.freeze({
			Fire = noop
		}),
		updateMoveSpeedText = table.freeze({
			On = noop
		}),
		updateIntervalText = table.freeze({
			On = noop
		}),
		updateMultiplierText = table.freeze({
			On = noop
		}),
		updateMaxDecorationsText = table.freeze({
			On = noop
		}),
		updatePickupRangeText = table.freeze({
			On = noop
		}),
		finishPlayerLoading = table.freeze({
			On = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")
local reliable = remotes:WaitForChild("ZAP_RELIABLE")
local unreliable = remotes:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(13)
local event_queue: { [number]: { any } } = table.create(13)
events[2] = {}
event_queue[2] = {}
events[8] = {}
event_queue[8] = {}
events[9] = {}
event_queue[9] = {}
events[10] = {}
event_queue[10] = {}
events[11] = {}
event_queue[11] = {}
events[12] = {}
event_queue[12] = {}
events[13] = {}
event_queue[13] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 2 then
			local value
			value = {}
			value.currentCurrency = buffer.readi32(incoming_buff, read(4))
			if events[2][1] then
				for _, cb in events[2] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[2], value)
				if #event_queue[2] > 64 then
					warn(`[ZAP] {#event_queue[2]} events in queue for updateCurrency. Did you forget to attach a listener?`)
				end
			end
		elseif id == 8 then
			local value
			value = {}
			value.tier = buffer.readi8(incoming_buff, read(1))
			value.currentCurrency = buffer.readi32(incoming_buff, read(4))
			if events[8][1] then
				for _, cb in events[8] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[8], value)
				if #event_queue[8] > 64 then
					warn(`[ZAP] {#event_queue[8]} events in queue for updateMoveSpeedText. Did you forget to attach a listener?`)
				end
			end
		elseif id == 9 then
			local value
			value = {}
			value.tier = buffer.readi8(incoming_buff, read(1))
			value.currentCurrency = buffer.readi32(incoming_buff, read(4))
			if events[9][1] then
				for _, cb in events[9] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[9], value)
				if #event_queue[9] > 64 then
					warn(`[ZAP] {#event_queue[9]} events in queue for updateIntervalText. Did you forget to attach a listener?`)
				end
			end
		elseif id == 10 then
			local value
			value = {}
			value.tier = buffer.readi8(incoming_buff, read(1))
			value.currentCurrency = buffer.readi32(incoming_buff, read(4))
			if events[10][1] then
				for _, cb in events[10] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[10], value)
				if #event_queue[10] > 64 then
					warn(`[ZAP] {#event_queue[10]} events in queue for updateMultiplierText. Did you forget to attach a listener?`)
				end
			end
		elseif id == 11 then
			local value
			value = {}
			value.tier = buffer.readi8(incoming_buff, read(1))
			value.currentCurrency = buffer.readi32(incoming_buff, read(4))
			if events[11][1] then
				for _, cb in events[11] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[11], value)
				if #event_queue[11] > 64 then
					warn(`[ZAP] {#event_queue[11]} events in queue for updateMaxDecorationsText. Did you forget to attach a listener?`)
				end
			end
		elseif id == 12 then
			local value
			value = {}
			value.tier = buffer.readi8(incoming_buff, read(1))
			value.currentCurrency = buffer.readi32(incoming_buff, read(4))
			if events[12][1] then
				for _, cb in events[12] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[12], value)
				if #event_queue[12] > 64 then
					warn(`[ZAP] {#event_queue[12]} events in queue for updatePickupRangeText. Did you forget to attach a listener?`)
				end
			end
		elseif id == 13 then
			local value
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value = incoming_inst[incoming_ipos]
			else
				value = nil
			end
			if events[13][1] then
				for _, cb in events[13] do
					task.spawn(cb, value)
				end
			else
				table.insert(event_queue[13], value)
				if #event_queue[13] > 64 then
					warn(`[ZAP] {#event_queue[13]} events in queue for finishPlayerLoading. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = {
	SendEvents = SendEvents,
	pickupDecoration = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
		end,
	},
	purchaseMoveSpeedUpgrade = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
		end,
	},
	purchaseIntervalUpgrade = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
		end,
	},
	purchaseMultiplierUpgrade = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
		end,
	},
	purchaseMaxDecorationsUpgrade = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 6)
		end,
	},
	purchasePickupRangeUpgrade = {
		Fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
		end,
	},
	updateCurrency = {
		On = function(Callback: (({
			currentCurrency: (number),
		})) -> ())
			table.insert(events[2], Callback)
			for _, value in event_queue[2] do
				task.spawn(Callback, value)
			end
			event_queue[2] = {}
			return function()
				table.remove(events[2], table.find(events[2], Callback))
			end
		end,
	},
	updateMoveSpeedText = {
		On = function(Callback: (({
			tier: (number),
			currentCurrency: (number),
		})) -> ())
			table.insert(events[8], Callback)
			for _, value in event_queue[8] do
				task.spawn(Callback, value)
			end
			event_queue[8] = {}
			return function()
				table.remove(events[8], table.find(events[8], Callback))
			end
		end,
	},
	updateIntervalText = {
		On = function(Callback: (({
			tier: (number),
			currentCurrency: (number),
		})) -> ())
			table.insert(events[9], Callback)
			for _, value in event_queue[9] do
				task.spawn(Callback, value)
			end
			event_queue[9] = {}
			return function()
				table.remove(events[9], table.find(events[9], Callback))
			end
		end,
	},
	updateMultiplierText = {
		On = function(Callback: (({
			tier: (number),
			currentCurrency: (number),
		})) -> ())
			table.insert(events[10], Callback)
			for _, value in event_queue[10] do
				task.spawn(Callback, value)
			end
			event_queue[10] = {}
			return function()
				table.remove(events[10], table.find(events[10], Callback))
			end
		end,
	},
	updateMaxDecorationsText = {
		On = function(Callback: (({
			tier: (number),
			currentCurrency: (number),
		})) -> ())
			table.insert(events[11], Callback)
			for _, value in event_queue[11] do
				task.spawn(Callback, value)
			end
			event_queue[11] = {}
			return function()
				table.remove(events[11], table.find(events[11], Callback))
			end
		end,
	},
	updatePickupRangeText = {
		On = function(Callback: (({
			tier: (number),
			currentCurrency: (number),
		})) -> ())
			table.insert(events[12], Callback)
			for _, value in event_queue[12] do
				task.spawn(Callback, value)
			end
			event_queue[12] = {}
			return function()
				table.remove(events[12], table.find(events[12], Callback))
			end
		end,
	},
	finishPlayerLoading = {
		On = function(Callback: (((unknown))) -> ())
			table.insert(events[13], Callback)
			for _, value in event_queue[13] do
				task.spawn(Callback, value)
			end
			event_queue[13] = {}
			return function()
				table.remove(events[13], table.find(events[13], Callback))
			end
		end,
	},
}
type Events = typeof(returns)
return returns
